// lib/auth.ts
import { signInWithPopup, signOut as firebaseSignOut, onAuthStateChanged, type User as FirebaseUser } from 'firebase/auth'
import { auth, googleProvider } from './firebase'
import { supabase } from './supabase'
import type { User } from '@/types/auth'

export async function signInWithGoogle(): Promise<User | null> {
  try {
    console.log('üîê Iniciando login com Google...')
    const result = await signInWithPopup(auth, googleProvider)
    const firebaseUser = result.user
    
    if (!firebaseUser.email) {
      throw new Error('Email n√£o encontrado na conta Google')
    }

    console.log('‚úÖ Login Firebase bem-sucedido:', firebaseUser.uid)

    // Criar ou atualizar usu√°rio no Supabase
    const userData = {
      id: firebaseUser.uid,
      email: firebaseUser.email,
      name: firebaseUser.displayName || 'Usu√°rio',
      avatar_url: firebaseUser.photoURL || '',
    }

    // Primeiro, tenta buscar o usu√°rio existente usando maybeSingle()
    console.log('üîç Buscando usu√°rio no Supabase...')
    const { data: existingUser, error: fetchError } = await supabase
      .from('users')
      .select('*')
      .eq('id', firebaseUser.uid)
      .maybeSingle() // Usa maybeSingle ao inv√©s de single para evitar erro quando n√£o encontra

    if (fetchError && fetchError.code !== 'PGRST116') {
      console.error('‚ùå Erro ao buscar usu√°rio:', fetchError)
      throw fetchError
    }

    if (existingUser) {
      // Atualizar dados do usu√°rio existente
      console.log('üìù Atualizando usu√°rio existente...')
      const { data: updatedUser, error: updateError } = await supabase
        .from('users')
        .update({
          name: userData.name,
          avatar_url: userData.avatar_url,
          updated_at: new Date().toISOString()
        })
        .eq('id', firebaseUser.uid)
        .select()
        .single()

      if (updateError) {
        console.error('‚ùå Erro ao atualizar usu√°rio:', updateError)
        throw updateError
      }

      console.log('‚úÖ Usu√°rio atualizado com sucesso:', updatedUser)
      return updatedUser
    } else {
      // Criar novo usu√°rio com 1000 cr√©ditos
      console.log('üÜï Criando novo usu√°rio...')
      const { data: newUser, error: insertError } = await supabase
        .from('users')
        .insert({
          ...userData,
          credits: 1000,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select()
        .single()

      if (insertError) {
        console.error('‚ùå Erro ao criar usu√°rio:', insertError)
        throw insertError
      }

      console.log('‚úÖ Novo usu√°rio criado com sucesso:', newUser)
      return newUser
    }
  } catch (error) {
    console.error('‚ùå Erro no login:', error)
    throw error
  }
}

export async function signOut(): Promise<void> {
  try {
    console.log('üëã Fazendo logout...')
    await firebaseSignOut(auth)
    console.log('‚úÖ Logout realizado com sucesso')
  } catch (error) {
    console.error('‚ùå Erro no logout:', error)
    throw error
  }
}

export async function getCurrentUser(): Promise<User | null> {
  return new Promise((resolve) => {
    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
      unsubscribe()
      
      if (!firebaseUser) {
        console.log('‚ùå Nenhum usu√°rio autenticado')
        resolve(null)
        return
      }

      try {
        console.log('üîç Buscando dados do usu√°rio:', firebaseUser.uid)
        
        // Usa maybeSingle para evitar erro quando n√£o encontra
        const { data: user, error } = await supabase
          .from('users')
          .select('*')
          .eq('id', firebaseUser.uid)
          .maybeSingle()

        if (error && error.code !== 'PGRST116') {
          console.error('‚ùå Erro ao buscar usu√°rio:', error)
          resolve(null)
          return
        }

        if (!user) {
          console.log('‚ö†Ô∏è Usu√°rio n√£o encontrado no banco, tentando criar...')
          
          // Se o usu√°rio n√£o existe, tenta criar
          const userData = {
            id: firebaseUser.uid,
            email: firebaseUser.email || '',
            name: firebaseUser.displayName || 'Usu√°rio',
            avatar_url: firebaseUser.photoURL || '',
            credits: 1000,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }

          const { data: newUser, error: insertError } = await supabase
            .from('users')
            .insert(userData)
            .select()
            .single()

          if (insertError) {
            console.error('‚ùå Erro ao criar usu√°rio:', insertError)
            resolve(null)
            return
          }

          console.log('‚úÖ Usu√°rio criado com sucesso:', newUser)
          resolve(newUser)
        } else {
          console.log('‚úÖ Usu√°rio encontrado:', user)
          resolve(user)
        }
      } catch (error) {
        console.error('‚ùå Erro ao buscar usu√°rio:', error)
        resolve(null)
      }
    })
  })
}

export async function updateUserCredits(userId: string, newCredits: number): Promise<User | null> {
  try {
    console.log('üí∞ Atualizando cr√©ditos no banco:', { userId, newCredits })
    
    const { data: user, error } = await supabase
      .from('users')
      .update({ 
        credits: newCredits,
        updated_at: new Date().toISOString()
      })
      .eq('id', userId)
      .select()
      .single()

    if (error) {
      console.error('‚ùå Erro ao atualizar cr√©ditos no Supabase:', error)
      throw error
    }
    
    console.log('‚úÖ Cr√©ditos atualizados no banco:', user)
    return user
  } catch (error) {
    console.error('‚ùå Erro na fun√ß√£o updateUserCredits:', error)
    return null
  }
}